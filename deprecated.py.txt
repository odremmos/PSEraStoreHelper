@app_commands.command(name="tt")
    async def tt(self, interaction: discord.Interaction):
        """Shows the ten best selling games of given Stores"""
        """, stores: str = None"""
        stores = None
        if not stores:
            view = TopTenHowToPickView()
            await interaction.response.send_message(
                "How do you want to pick the stores?",
                view=view,
                ephemeral=True,
            )

            await view.wait()
            if view.value == 0:
                view.stop()
                print("here")
                # message = await interaction.original_response()
                await interaction.delete_original_response()
                foll = await interaction.followup.send(content="Which stores?")
                await foll.edit(content="Test")
                print(dir(foll))
                for store in storedict:
                    await foll.add_reaction(str(storedict[store]["flag"]))
            if view.value == 1:
                view.stop()
                alias_view = AliasView()
                foll = await interaction.followup.send(
                    content="Which alias?", view=alias_view, ephemeral=True
                )
                await alias_view.wait()
                stores = alias_view.return_value
                await foll.delete()
                alias_view.stop()
        storelist = []
        imageonly = False
        title = "Bestselling Games"
        valid, storelist = validate_stores(stores, storedict, store_sets, custom_sets)
        if not valid:
            pass
        else:
            function = get_best_selling_games
            results = await async_process_data(
                storedict, function, storelist, link_type=listtypes["topten"]
            )
            embeds, len_of_results = await process_top_lists(
                results,
                title,
                storelist,
                imageonly,
                url_type="topten",
                grid_type="topten",
            )
            if len_of_results > 5:
                thread = await interaction.channel.create_thread(
                    name="Top 10",
                    type=discord.ChannelType.public_thread,
                )
                for embed in embeds:
                    await thread.send(embed=embed)
                await interaction.channel.send(
                    content="<:katpeek:740197912524619796> Here you go"
                )
            else:
                await interaction.channel.send(embeds=embeds)

    @tt.error
    async def tt_error(self, interaction: discord.Interaction, error):
        logger.error(interaction.data["name"])
        # for option in interaction.data["options"]:
        #    message = f'addalias Error - {option["name"]}:{option["value"]}'
        #    logger.error(message)
        logger.error(error)
        logger.error(traceback.format_exc())
        await interaction.followup.send("Ran into an error.")



    async def amazon_autocompletion(
        self, interaction: discord.Interaction, current: str
    ) -> typing.List[app_commands.Choice[str]]:
        """This function returns the

        Parameters
        ----------
        interaction : discord.Interaction
            The current interaction
        current : str
            The current input in the connected parameter

        Returns
        -------
        typing.List[app_commands.Choice[str]]
            List of suggestions
        """
        data = []
        try:
            matching_keys = [
                key
                for key in self.amazon_regions
                if key.lower().startswith(current.lower()) or current == ""
            ]
            for x in matching_keys:
                return_value = x
                if x == "us":
                    return_value = "com"
                if x == "uk":
                    return_value = "co.uk"
                if x != "com":
                    data.append(
                        app_commands.Choice(
                            name=store_dict[x.upper()]["name"], value=return_value
                        )
                    )
        except Exception as error:
            logger.error(traceback.format_exc())
            logger.error(error)

        return data

    @app_commands.command(name="amazon")
    @app_commands.autocomplete(
        region=amazon_autocompletion, export=export_autocompletion
    )
    async def amazon(
        self,
        interaction: discord.Interaction,
        region: str,
        silent: bool = False,
        export: str = None,
    ):
        """Amazon Charts

        Parameters
        ----------
        region : str
            Which Country you want to get Amazon bestsellers
        silent : bool, optional
            Result will only visible for you
        export : str, optional
            Export data in csv or json
        """
        await self.base_log(interaction)
        link, _ = await self.get_amazon_link(region=region)
        if not _:
            await interaction.response.send_message(
                content="Store either not supported or you made a typo.", ephemeral=True
            )
        else:
            await self.message_handler(ctx=interaction, message_type="init")
            # "Amazon is throttling the bot. Will retry again in 10 seconds."
            soup = await get_amazon_soup(link=link, region=region)
            if soup == "retry" or soup == "fail":
                if soup == "retry":
                    message = ":red_square: Amazon is throttling the bot. Will retry again in 10 seconds."
                elif soup == "fail":
                    message = ":red_square: The data scrape has failed. Will retry again in 10 seconds."
                await self.message_handler(
                    ctx=interaction,
                    message_type=message,
                )
                await asyncio.sleep(10)
                soup = await get_amazon_soup(link=link, region=region, retry=True)
                if soup == "ending":
                    raise AmazonRetryThrottle(
                        ":red_square: Attempt has not been successful. Try again in a bit."
                    )
            await self.message_handler(
                ctx=interaction,
                message_type="preparing",
            )
            results = await get_amazon_chart(soup=soup, region=region)
            message = ""
            embed = discord.Embed(
                title="\u200b",
                color=0x0063C9,
                timestamp=datetime.now(),
                description=message,
            )
            imgur_url = await setup_procure_images(image_string="", grid_type="amazon")
            if imgur_url:
                embed.set_image(url=imgur_url)
                embed.set_author(
                    icon_url="https://cdn.iconscout.com/icon/free/png-256/free-amazon-2296099-1912058.png",
                    name=f"Amazon Charts {region.upper()}",
                )
                embed.set_footer(
                    text=f"Amazon {region.upper()}",
                    icon_url="https://cdn.iconscout.com/icon/free/png-256/free-amazon-2296099-1912058.png",
                )
                await interaction.delete_original_response()
                await interaction.followup.send(embed=embed, ephemeral=silent)
            else:
                await interaction.delete_original_response()
                await interaction.followup.send(
                    content="Could not procure image.", ephemeral=True
                )
            if export:
                file = export_data(
                    data=results, file_format=export, command=interaction.command.name
                )
                await interaction.followup.send(file=discord.file.File(file))
                delete_file(file)


commands.json:
"amazon": {
      "description": "Amazon gaming bestseller",
      "text": "Parameters: store\n\nReturns an embed with the Top 10 items from the given Amazon store.\nA screenshot fo the Top 50 is included."
    },
